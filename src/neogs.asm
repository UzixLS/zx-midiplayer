GSDAT            equ #B3 ; read-write, data transfer register for NGS
GSCOM            equ #BB ; write-only, command for NGS

GSSTAT           equ #BB ; read-only, command and data bits (positions given immediately below)
B_CBIT           equ 0   ; Command
M_CBIT           equ #01 ; Command
B_DBIT           equ 7   ; Data
M_DBIT           equ #80 ; Data

GSCTR            equ #33 ; write-only, control register for NGS: constants available given immediately below
C_GRST           equ #80 ; reset
C_GNMI           equ #40 ; NMI
C_GLED           equ #20 ; LED toggle

GSCFG0           equ #0F ; read-write, GS ConFiG port 0: acts as memory cell, reads previously written value. Bits and fields follow:
B_NOROM          equ 0   ; =0 - there is ROM everywhere except 4000-7FFF, =1 - the RAM is all around
M_NOROM          equ #01
B_RAMRO          equ 1   ; =1 - ram absolute addresses 0000-7FFF (zeroth big page) are write-protected
M_RAMRO          equ #02
B_8CHANS         equ 2   ; =1 - 8 channels mode
M_8CHANS         equ #04
B_EXPAG          equ 3   ; =1 - extended paging: both MPAG and MPAGEX are used to switch two memory windows
M_EXPAG          equ #08
B_CKSEL0         equ 4   ;these bits should be set according to the C_**MHZ constants below
M_CKSEL0         equ #10
B_CKSEL1         equ 5
M_CKSEL1         equ #20
C_10MHZ          equ #30
C_12MHZ          equ #10
C_20MHZ          equ #20
C_24MHZ          equ #00
B_PAN4CH         equ 6   ; =1 - 4 channels, panning (every channel is on left and right with two volumes)
M_PAN4CH         equ #40

SCTRL            equ #11 ; Serial ConTRoL: read-write, read: current state of below bits, write - see GS_info
B_SETNCLR        equ 7
M_SETNCLR        equ #80
M_SDNCS          equ #01
B_SDNCS          equ 0
B_MCNCS          equ 1
M_MCNCS          equ #02
B_MPXRS          equ 2
M_MPXRS          equ #04
B_MCSPD0         equ 3
M_MCSPD0         equ #08
B_MDHLF          equ 4
M_MDHLF          equ #10
B_MCSPD1         equ 5
M_MCSPD1         equ #20

SSTAT            equ #12 ; Serial STATus: read-only, reads state of below bits
B_MDDRQ          equ 0
M_MDDRQ          equ #01
B_SDDET          equ 1
M_SDDET          equ #02
B_SDWP           equ 2
M_SDWP           equ #04
B_MCRDY          equ 3
M_MCRDY          equ #08

SD_SEND          equ #13 ; SD card SEND, write-only, when written, byte transfer starts with written byte
SD_READ          equ #13 ; SD card READ, read-only, reads byte received in previous byte transfer
SD_RSTR          equ #14 ; SD card Read and STaRt, read-only, reads previously received byte and starts new byte transfer with #FF
MD_SEND          equ #14 ; Mp3 Data SEND, write-only, sends byte to the mp3 data interface
MC_SEND          equ #15 ; Mp3 Control SEND, write-only, sends byte to the mp3 control interface
MC_READ          equ #15 ; Mp3 Control READ, read-only, reads byte that was received during previous sending of byte


    MACRO WC
    in a, (GSCOM) ;
    rrca          ;
    jr c, $-3     ;
    ENDM

    MACRO WD
    in a, (GSCOM) ;
    rlca          ;
    jr c, $-3     ;
    ENDM

    MACRO WN
    in a, (GSCOM) ;
    rlca          ;
    jr nc, $-3    ;
    ENDM

; IN -  A  - port value
; IN  - C  - port number
; OUT - AF - garbage
neogs_out:
    push af                                       ;
    ld a, c                                       ;
    out (GSDAT), a                                ;
    ld a, #10                                     ;
    out (GSCOM), a                                ;
    WC                                            ;
    pop af                                        ;
    out (GSDAT), a                                ;
    WD                                            ;
    ret                                           ;

; IN  - C  - port number
; OUT - A  - port value
; OUT - F  - garbage
neogs_in:
    ld a, c                                       ;
    out (GSDAT), a                                ;
    ld a, #11                                     ;
    out (GSCOM), a                                ;
    WC                                            ;
    WN                                            ;
    in a, (GSDAT)                                 ;
    ret                                           ;

; OUT - AF - garbage
neogs_reset_once:
.A  ld a, #c9                                     ; self modifying code!
    ld (.A), a                                    ; ... ret
    ld a, C_GRST                                  ;
    out (GSCTR), a                                ;
    ret                                           ;


SCI_OP_READ     equ #03
SCI_OP_WRITE    equ #02
SCI_MODE        equ #00
SCI_STATUS      equ #01
SCI_BASS        equ #02
SCI_CLOCKF      equ #03
SCI_DECODE_TIME equ #04
SCI_AUDATA      equ #05
SCI_WRAM        equ #06
SCI_WRAMADDR    equ #07
SCI_HDAT0       equ #08
SCI_HDAT1       equ #09
SCI_AIADDR      equ #0A
SCI_VOL         equ #0B
SCI_AICTRL0     equ #0C
SCI_AICTRL1     equ #0D
SCI_AICTRL2     equ #0E
SCI_AICTRL3     equ #0F

; IN  - B  - register address
; IN  - DE - register value
; OUT - AF - garbage
; OUT - C  - garbage
neogs_vs_writereg:
    ld c, SCTRL                                   ; cs=0
    ld a, M_MCNCS                                 ; ...
    call neogs_out                                ; ...
    ld c, MC_SEND                                 ;
    ld a, SCI_OP_WRITE                            ;
    call neogs_out                                ;
    ld a, b                                       ; reg
    call neogs_out                                ;
    ld a, d                                       ; hi
    call neogs_out                                ;
    ld a, e                                       ; low
    call neogs_out                                ;
    ld c, SCTRL                                   ; cs=1
    ld a, M_MCNCS | M_SETNCLR                     ; ...
    call neogs_out                                ; ...

neogs_vs_wait:
    ld c, SSTAT                                   ;
1:  call neogs_in                                 ;
    and M_MDDRQ                                   ;
    jr z, 1b                                      ;
    ret                                           ;

neogs_vs1053_midi_prepare:
.A  ld a, #c9                                     ; self modifying code!
    ld (.A), a                                    ; ... ret
    call neogs_reset_once                         ;
    ld c, GSCFG0                                  ; Fcpu = 12mhz | self modifying code! see bellow
    call neogs_in                                 ; ...
    and #ff-M_CKSEL0-M_CKSEL1                     ; ...
    or C_12MHZ                                    ; ...
    call neogs_out                                ; ...
    ld c, SCTRL                                   ; reset codec
    ld a, M_MPXRS | M_MCSPD1 | M_MDHLF            ; ... Fsck(SCI) = Fcpu/4, Fsck(SDI) = Fcpu/2
    call neogs_out                                ; ...
    ld a, M_MPXRS | M_MCSPD0 | M_SETNCLR          ; ...
    call neogs_out                                ; ...
    ei : halt                                     ; wait >= 1.8ms after reset
.configure_codec:
    ld b, SCI_CLOCKF                              ; SC_MULT=×3.0 | SC_ADD=×0.0 | SC_FREQ=14MHz
    ld de, (#6000 | #0000 | #05DC)                ; ...
    call neogs_vs_writereg                        ; ...
    ld b, SCI_MODE                                ;
    ld de, #0020                                  ; ...
    call neogs_vs_writereg                        ; ...
.upload_rtmidi_plugin:
    ld hl, vs1053_rtmidi_plugin                   ;
.next_address:
    push hl                                       ; check for end of data
    ld de, vs1053_rtmidi_plugin.end               ; ...
    or a                                          ; ...
    sbc hl, de                                    ; ...
    pop hl                                        ; ...
    jr z, .upload_done                            ; ...
    ld b, (hl)                                    ; register address
    .2 inc hl                                     ; ...
    call neogs_out                                ; ...
    ld e, (hl)                                    ; number_of_words to write
    inc hl                                        ; ...
    ld d, (hl)                                    ; ...
    inc hl                                        ; ...
.next_word:
    ld a, d : or e                                ; number_of_words != 0 ?
    jr z, .next_address                           ;
    dec de                                        ; number_of_words--
    push de                                       ;
    ld e, (hl)                                    ;
    inc hl                                        ;
    ld d, (hl)                                    ;
    inc hl                                        ;
    call neogs_vs_writereg                        ;
    pop de                                        ;
    jr .next_word                                 ;
.upload_done:
    ld b, SCI_AIADDR                              ; start rtmidi plugin (VS10XX REAL-TIME MIDI INPUT pdf rev 1.1b)
    ld de, #0050                                  ; ...
    jp neogs_vs_writereg                          ; ...

neogs_vs1053_midi_tx:
    ld e, a                                       ;
    ld c, MD_SEND                                 ;
    xor a                                         ;
    call neogs_out                                ;
    ld a, e                                       ;
    jp neogs_out                                  ;

neogs_vs1053_midi_flush_txbuf:
    ret                                           ;

vs1053_rtmidi_plugin:
    dw 0x0007,0x0001 /*copy 1*/
    dw 0x8050
    dw 0x0006,0x03f0 /*copy 1008*/
    dw 0x2800,0x8080,0x0006,0x2016,0xf400,0x4095,0x0006,0x0017
    dw 0x3009,0x1c40,0x3009,0x1fc2,0x6020,0x0024,0x0000,0x1fc2
    dw 0x2000,0x0000,0xb020,0x4542,0x3613,0x0024,0x0006,0x0057
    dw 0x3e15,0x1c15,0x0020,0x1fd4,0x3580,0x3802,0xf204,0x3804
    dw 0x0fff,0xfe44,0xa244,0x1804,0xf400,0x4094,0x2800,0x1985
    dw 0x3009,0x1bc2,0xf400,0x4500,0x2000,0x0000,0x36f5,0x3c15
    dw 0x3009,0x3857,0x2800,0x1b40,0x0030,0x0457,0x3009,0x3857
    dw 0x0030,0x0a57,0x3e14,0xf806,0x3701,0x8024,0x0006,0x0017
    dw 0x3e04,0x9c13,0x0020,0x1fd2,0x3b81,0x8024,0x36f4,0xbc13
    dw 0x36f4,0xd806,0x0030,0x0717,0x2100,0x0000,0x3f05,0xdbd7
    dw 0x0030,0xf80f,0x0000,0x1f0e,0x2800,0x7680,0x0000,0x004d
    dw 0xf400,0x4595,0x3e00,0x17cc,0x3505,0xf802,0x3773,0x0024
    dw 0x3763,0x0024,0x3700,0x0024,0x0000,0x09c2,0x6024,0x0024
    dw 0x3600,0x1802,0x2830,0xf855,0x0000,0x004d,0x2800,0x2240
    dw 0x36f3,0x0024,0x3613,0x0024,0x3e12,0xb817,0x3e12,0x3815
    dw 0x3e05,0xb814,0x3625,0x0024,0x0000,0x800a,0x3e10,0x3801
    dw 0x3e10,0xb803,0x3e11,0x3810,0x3e04,0x7812,0x34c3,0x0024
    dw 0x3440,0x0024,0x4080,0x0024,0x001b,0x3301,0x2800,0x2c85
    dw 0x0000,0x0180,0x0000,0x0551,0x0000,0xaf02,0x293c,0x1f40
    dw 0x0007,0xffc1,0xb010,0x134c,0x0018,0x0001,0x4010,0x10d0
    dw 0x0007,0xffc1,0xfe20,0x020c,0x0000,0x0591,0x48b6,0x0024
    dw 0x4dd6,0x0024,0x0001,0x2202,0x293c,0x1f40,0x4380,0x2003
    dw 0xb010,0x134c,0x0018,0x0001,0x4010,0x1010,0xfe20,0x020c
    dw 0x48b6,0x844c,0x4dd6,0x0024,0xb880,0x2003,0x3434,0x0024
    dw 0x2800,0x5280,0x3083,0x0024,0x001c,0xccc2,0x0000,0x05d1
    dw 0x34d3,0x0024,0x3404,0x0024,0x3404,0x420c,0x3001,0x05cc
    dw 0xa408,0x044c,0x3100,0x0024,0x6010,0x0024,0xfe20,0x0024
    dw 0x48b6,0x0024,0x4dd6,0x0024,0x4310,0x0024,0x4488,0x2400
    dw 0x0000,0x0551,0x2800,0x3295,0x3404,0x0024,0xf290,0x00cc
    dw 0x3800,0x0024,0x3434,0x0024,0x3073,0x0024,0x3013,0x0024
    dw 0x2800,0x4340,0x3800,0x0024,0x3083,0x0024,0x3000,0x0024
    dw 0x6402,0x0024,0x0000,0x1001,0x2800,0x3618,0x0018,0x0002
    dw 0x3434,0x4024,0x3133,0x0024,0x3100,0x0024,0xfe20,0x0024
    dw 0x48b6,0x0024,0x4dd6,0x0024,0x2800,0x4340,0x3900,0xc024
    dw 0x4010,0x1011,0x6402,0x0024,0x0000,0x0590,0x2800,0x3918
    dw 0x0000,0x0024,0xf290,0x04cc,0x3900,0x0024,0x3434,0x0024
    dw 0x3073,0x0024,0x3013,0x0024,0x2800,0x4340,0x3800,0x0024
    dw 0x3183,0x0024,0x3100,0x0024,0x6402,0x0024,0x0000,0x1001
    dw 0x2800,0x3c98,0x0019,0x9982,0x3434,0x0024,0x3033,0x0024
    dw 0x3000,0x0024,0xfe20,0x0024,0x48b6,0x0024,0x4dd6,0x0024
    dw 0x2800,0x4340,0x3800,0xc024,0x4010,0x0024,0x6402,0x0024
    dw 0x001d,0x7082,0x2800,0x4198,0x0000,0x0024,0xf290,0x1010
    dw 0x3033,0x0024,0x3800,0x0024,0x3404,0x0024,0x3073,0x0024
    dw 0x3013,0x0024,0x3800,0x0024,0x0004,0x4d50,0x3010,0x0024
    dw 0x30f0,0x4024,0x3434,0x4024,0x3143,0x0024,0x3910,0x0024
    dw 0x2800,0x4340,0x39f0,0x4024,0x3434,0x0024,0x3033,0x0024
    dw 0x3000,0x0024,0xfe20,0x0024,0x48b6,0x0024,0x4dd6,0x0024
    dw 0x3800,0xc024,0x001e,0x9982,0x0001,0x1012,0x0000,0x0381
    dw 0x34d3,0x184c,0x3444,0x0024,0x3073,0x0024,0x3013,0x0024
    dw 0x3000,0x0024,0xfe20,0x0024,0x48b6,0x0024,0x4dd6,0x0024
    dw 0x4380,0x3003,0x3400,0x0024,0x293d,0x2900,0x3e00,0x0024
    dw 0x3009,0x33c0,0x293b,0xc540,0x0010,0x0004,0x34d3,0x184c
    dw 0x3444,0x0024,0x3073,0x13c0,0x3073,0x0024,0x293b,0xf880
    dw 0x0001,0x1011,0x0001,0x0010,0x0001,0x1011,0x34d3,0x184c
    dw 0x3430,0x0024,0x4010,0x0024,0x0000,0x05c1,0x3e10,0x0024
    dw 0x293b,0xac80,0x0006,0x0092,0x0000,0x05d1,0x36f3,0x134c
    dw 0x3404,0x0024,0x3083,0x0024,0x3000,0x0024,0x6012,0x0024
    dw 0x0013,0x3304,0x2800,0x5198,0x0001,0xc682,0x0000,0x0500
    dw 0x0001,0x0012,0x3404,0x584c,0x3133,0x0024,0x3100,0x4024
    dw 0x0000,0x05d1,0xfe22,0x0024,0x48b6,0x0024,0x4dd6,0x0024
    dw 0x3e10,0xc024,0x3430,0x8024,0x4204,0x0024,0x293b,0xb580
    dw 0x3e00,0x8024,0x36e3,0x134c,0x3434,0x0024,0x3083,0x0024
    dw 0x3000,0x0024,0x6090,0x0024,0x3800,0x1812,0x36f4,0x4024
    dw 0x36f1,0x1810,0x36f0,0x9803,0x36f0,0x1801,0x3405,0x9014
    dw 0x36f3,0x0024,0x36f2,0x1815,0x2000,0x0000,0x36f2,0x9817
    dw 0x3613,0x0024,0x3e12,0xb817,0x3e12,0x3815,0x3e05,0xb814
    dw 0x3615,0x0024,0x0000,0x800a,0x3e10,0x3801,0x3e10,0xb804
    dw 0x3e01,0x7810,0x0008,0x04d0,0x2900,0x1480,0x3001,0x0024
    dw 0x4080,0x03cc,0x3000,0x0024,0x2800,0x7485,0x4090,0x0024
    dw 0x0000,0x0024,0x2800,0x6245,0x0000,0x0024,0x0000,0x0081
    dw 0x3000,0x0024,0x6012,0x0024,0x0000,0x0401,0x2800,0x70c5
    dw 0x0000,0x0024,0x6012,0x0024,0x0000,0x0024,0x2800,0x6645
    dw 0x0000,0x0024,0x2900,0x1680,0x0000,0x0024,0x4088,0x008c
    dw 0x0000,0x2000,0x6400,0x0024,0x0000,0x3c00,0x2800,0x5ed8
    dw 0x0000,0x0024,0x2800,0x6300,0x3801,0x0024,0x6400,0x038c
    dw 0x0000,0x0024,0x2800,0x6318,0x0000,0x0024,0x3013,0x0024
    dw 0x2900,0x1480,0x3801,0x0024,0x4080,0x0024,0x0000,0x0024
    dw 0x2800,0x6255,0x0000,0x0024,0x6890,0x03cc,0x2800,0x7480
    dw 0x3800,0x0024,0x2900,0x1680,0x0008,0x0510,0x3800,0x0024
    dw 0x0000,0x3c00,0x6400,0x0024,0x003f,0xff00,0x2800,0x6b08
    dw 0x0000,0x0024,0x0000,0x3fc0,0x6400,0x0024,0x0000,0x3c00
    dw 0x2800,0x73c5,0x6400,0x0024,0x0000,0x0024,0x2800,0x73d5
    dw 0x0000,0x0024,0xb880,0x184c,0x2900,0x1480,0x3009,0x3800
    dw 0x4082,0x9bc0,0x6014,0x0024,0x0000,0x3c04,0x2800,0x6941
    dw 0x0000,0x3dc1,0x2900,0x1680,0x0000,0x0024,0xf400,0x4004
    dw 0x0000,0x3dc1,0x6412,0x0024,0x0008,0x0490,0x2800,0x6a85
    dw 0x0000,0x0000,0x0000,0x0400,0x2800,0x7480,0x3800,0x0024
    dw 0x0008,0x04d0,0x3001,0x4024,0xa50a,0x0024,0x0000,0x03c0
    dw 0xb50a,0x0024,0x0000,0x0300,0x6500,0x0024,0x0000,0x0024
    dw 0x2900,0x1488,0x0000,0x6f48,0x0000,0x0380,0x6500,0x0024
    dw 0x0000,0x0024,0x2800,0x7195,0x0000,0x0024,0x2900,0x1480
    dw 0x0000,0x0024,0x4080,0x03cc,0x0000,0x0080,0x2800,0x70d5
    dw 0x0000,0x0024,0x2800,0x7480,0x3800,0x0024,0x2900,0x1680
    dw 0x0000,0x0024,0x408a,0x0024,0x0008,0x0510,0x3613,0x0024
    dw 0x3e11,0x4024,0x30f0,0x0024,0x3e10,0x0024,0x3000,0x4024
    dw 0x2931,0xe080,0x3e00,0x4024,0x36d3,0x0024,0x0000,0x0000
    dw 0x0008,0x0490,0x3800,0x0024,0x36f1,0x5810,0x36f0,0x9804
    dw 0x36f0,0x1801,0x3405,0x9014,0x36f3,0x0024,0x36f2,0x1815
    dw 0x2000,0x0000,0x36f2,0x9817,0x0005,0xbe51,0x0001,0x0010
    dw 0x3613,0x0024,0x3e05,0xb814,0x3635,0x0024,0x0000,0x800a
    dw 0xb880,0x104c,0xb882,0x33c0,0x2914,0xbec0,0x0004,0xc580
    dw 0x0019,0x98c0,0x0004,0x4e90,0x3800,0x0024,0x001f,0xff00
    dw 0x2931,0x6c40,0x3900,0x0024,0x2931,0x6640,0x0000,0x0024
    dw 0x2900,0x5500,0x0000,0x8001,0x2912,0x0d00,0x3613,0x0024
    dw 0x6012,0x0024,0x0000,0x8005,0x2800,0x7b18,0x0004,0x4d50
    dw 0x2912,0x0d00,0x3613,0x108c,0x2934,0x4180,0x3ce0,0x0024
    dw 0x0000,0x1000,0x3423,0x0024,0x2900,0x0a80,0x34e1,0x0024
    dw 0xb882,0x0042,0x30f0,0xc024,0x4dc2,0x0024,0x3810,0x0024
    dw 0x2800,0x7b00,0x38f0,0x4024,0x3e12,0xb817,0x3e12,0x3815
    dw 0x3e05,0xb814,0x3615,0x0024,0x0000,0x800a,0x3e10,0x3801
    dw 0x0000,0x0081,0xb880,0xb811,0x0030,0x0291,0x3e14,0x0024
    dw 0x0030,0x0690,0x3e14,0xb813,0x0030,0x00d3,0x0007,0x9252
    dw 0x3800,0x0024,0x3910,0x0024,0x3a00,0x0024,0x0000,0xc0c0
    dw 0x3900,0x0024,0x0030,0x0000,0x0006,0x0051,0x2908,0x6400
    dw 0x3b00,0x0024,0xb880,0x008c,0x3800,0x0024,0x3800,0x0024
    dw 0x0003,0x0d40,0x0006,0xc490,0x2908,0x7f80,0x3009,0x2000
    dw 0x0030,0x0ad0,0x3800,0x184c,0x002b,0x1100,0x3e10,0x0024
    dw 0x2909,0xa9c0,0x3e10,0x4024,0x000a,0x8001,0x2908,0x7f80
    dw 0x36e3,0x0024,0xb880,0x2000,0x0006,0x0010,0x3009,0x2410
    dw 0x0006,0x0011,0x3009,0x2410,0x0008,0x0490,0x3810,0x0024
    dw 0x3800,0x0024,0x0000,0x0890,0x290f,0xfcc0,0x0006,0x8380
    dw 0x000a,0x8001,0x0000,0x0950,0x290f,0xfcc0,0x0006,0xb380
    dw 0x0000,0x09c0,0x0030,0x0690,0x6890,0x2000,0x0030,0x1310
    dw 0x6890,0x2000,0x0030,0x0490,0x2900,0x1e00,0x3800,0x0024
    dw 0x36f4,0x9813,0x36f4,0x1811,0x36f0,0x1801,0x3405,0x9014
    dw 0x36f3,0x0024,0x36f2,0x1815,0x2000,0x0000,0x36f2,0x9817
    dw 0x0007,0x0001 /*copy 1*/
    dw 0x5800
    dw 0x0006,0x0004 /*copy 4*/
    dw 0x1800,0x1800,0x98cc,0x7395
    dw 0x0007,0x0001 /*copy 1*/
    dw 0x8025
    dw 0x0006,0x0002 /*copy 2*/
    dw 0x2a00,0x1ace
    dw 0x0007,0x0001 /*copy 1*/
    dw 0x8022
    dw 0x0006,0x0002 /*copy 2*/
    dw 0x2a00,0x1a0e
.end:
